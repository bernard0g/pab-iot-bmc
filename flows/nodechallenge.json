[
    {
        "id": "68ac9303c73c7848",
        "type": "tab",
        "label": "Fluxo 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "tab_pbclima_02",
        "type": "tab",
        "label": "Passa a Bola - Clima (ChartFix)",
        "disabled": false,
        "info": ""
    },
    {
        "id": "tab_cfg_c2a1",
        "type": "ui_tab",
        "name": "Passa a Bola",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "grp_cfg_5fd9",
        "type": "ui_group",
        "name": "Clima do Campo",
        "tab": "tab_cfg_c2a1",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "mqtt_broker_fix",
        "type": "mqtt-broker",
        "name": "Local Mosquitto",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true
    },
    {
        "id": "98bed8001ac26156",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "grp_hc_9b21",
        "type": "ui_group",
        "name": "Health Check",
        "tab": "tab_cfg_c2a1",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "inj_now_fix",
        "type": "inject",
        "z": "tab_pbclima_02",
        "name": "Rodar agora",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "now",
        "payloadType": "str",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "chg_url_fix"
            ]
        ]
    },
    {
        "id": "inj_5m_fix",
        "type": "inject",
        "z": "tab_pbclima_02",
        "name": "Agendar (5 min)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "300",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "timer",
        "payloadType": "str",
        "x": 160,
        "y": 170,
        "wires": [
            [
                "chg_url_fix"
            ]
        ]
    },
    {
        "id": "chg_url_fix",
        "type": "change",
        "z": "tab_pbclima_02",
        "name": "Definir lat/lon e URL",
        "rules": [
            {
                "t": "set",
                "p": "lat",
                "pt": "msg",
                "to": "-23.5505",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "lon",
                "pt": "msg",
                "to": "-46.6333",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "$string(\"https://api.open-meteo.com/v1/forecast?latitude=\" & $.lat & \"&longitude=\" & $.lon & \"&hourly=temperature_2m,relative_humidity_2m,precipitation,wind_speed_10m&current_weather=true&forecast_days=1&timezone=auto\")",
                "tot": "jsonata"
            }
        ],
        "x": 410,
        "y": 145,
        "wires": [
            [
                "http_om_fix"
            ]
        ]
    },
    {
        "id": "http_om_fix",
        "type": "http request",
        "z": "tab_pbclima_02",
        "name": "Open‑Meteo",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 145,
        "wires": [
            [
                "fn_score_fix",
                "dbg_raw_fix",
                "hc_api_status_sw",
                "hc_lastupd_fn"
            ]
        ]
    },
    {
        "id": "fn_score_fix",
        "type": "function",
        "z": "tab_pbclima_02",
        "name": "Calcular Índice de Jogo (com jitter)",
        "func": "\nconst h = msg.payload.hourly || {};\nconst cw = msg.payload.current_weather || {};\nconst idx = h.time ? h.time.findIndex(t => t === cw.time) : -1;\nconst i = idx >= 0 ? idx : 0;\nlet temp = (h.temperature_2m && h.temperature_2m[i]) ?? cw.temperature ?? 22;\nlet hum  = (h.relative_humidity_2m && h.relative_humidity_2m[i]) ?? 60;\nlet rain = (h.precipitation && h.precipitation[i]) ?? 0;\nlet wind = (h.wind_speed_10m && h.wind_speed_10m[i]) ?? cw.windspeed ?? 5;\n\n// Adiciona um leve \"jitter\" para demonstrar mudança nos testes manuais\nconst j = () => (Math.random()*0.8 - 0.4); // -0.4 .. +0.4\ntemp = Number((temp + j()).toFixed(1));\nrain = Math.max(0, Number((rain + j()).toFixed(1)));\nwind = Math.max(0, Number((wind + j()).toFixed(1)));\n\nlet score = 100;\nif (temp < 12 || temp > 34) score -= 40;\nelse if (temp < 18 || temp > 26) score -= 15;\nif (rain >= 10) score -= 45;\nelse if (rain >= 2) score -= 25;\nelse if (rain > 0) score -= 10;\nif (wind >= 40) score -= 25;\nelse if (wind >= 25) score -= 15;\nelse if (wind >= 15) score -= 8;\nif (hum >= 90) score -= 10;\nelse if (hum >= 75) score -= 5;\n\nscore = Math.max(0, Math.min(100, score));\n\nlet status = \"JOGO LIBERADO\";\nif (score < 60) status = \"AVALIAR (condições medianas)\";\nif (score < 40) status = \"DESACONSELHADO\";\nif (score < 20) status = \"SUSPENSO\";\n\nconst out = { _metrics: { temp, hum, rain, wind, score }, status };\nreturn [{ payload: out }, { topic: \"passa_bola/campo1/clima\", payload: out }];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 905,
        "y": 145,
        "wires": [
            [
                "fn_ui_fix"
            ],
            [
                "mqtt_out_fix"
            ]
        ]
    },
    {
        "id": "mqtt_out_fix",
        "type": "mqtt out",
        "z": "tab_pbclima_02",
        "name": "Publicar decisão",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt_broker_fix",
        "x": 1190,
        "y": 185,
        "wires": []
    },
    {
        "id": "dbg_raw_fix",
        "type": "debug",
        "z": "tab_pbclima_02",
        "name": "raw",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.current_weather",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 200,
        "wires": []
    },
    {
        "id": "fn_ui_fix",
        "type": "function",
        "z": "tab_pbclima_02",
        "name": "Atualizar Widgets / Chart por Tópico",
        "func": "\nconst m = msg.payload._metrics;\n\n// Para gauges e status (1..4)\nconst o1 = {payload: `${msg.payload.status} (Índice ${m.score})`};\nconst o2 = {payload: m.temp};\nconst o3 = {payload: m.rain};\nconst o4 = {payload: m.wind};\n\n// Para o chart, enviar duas mensagens separadas com topic\nconst o5 = {topic: 'Temp', payload: m.temp};\nconst o6 = {topic: 'Chuva', payload: m.rain};\n\nreturn [o1,o2,o3,o4,o5,o6];\n",
        "outputs": 6,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 60,
        "wires": [
            [
                "ui_txt_fix"
            ],
            [
                "ui_temp_fix"
            ],
            [
                "ui_rain_fix"
            ],
            [
                "ui_wind_fix"
            ],
            [
                "ui_chart_fix"
            ],
            [
                "ui_chart_fix"
            ]
        ]
    },
    {
        "id": "ui_txt_fix",
        "type": "ui_text",
        "z": "tab_pbclima_02",
        "group": "grp_cfg_5fd9",
        "order": 1,
        "width": "12",
        "height": "1",
        "name": "Status do Campo",
        "label": "Status do Campo",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1470,
        "y": 100,
        "wires": []
    },
    {
        "id": "ui_temp_fix",
        "type": "ui_gauge",
        "z": "tab_pbclima_02",
        "name": "Temp (°C)",
        "group": "grp_cfg_5fd9",
        "order": 2,
        "width": "4",
        "height": "4",
        "gtype": "gage",
        "title": "Temp (°C)",
        "label": "°C",
        "format": "{{value}}",
        "min": -5,
        "max": "40",
        "colors": [
            "#00bcd4",
            "#fdd835",
            "#f44336"
        ],
        "seg1": "18",
        "seg2": "26",
        "x": 1460,
        "y": 160,
        "wires": []
    },
    {
        "id": "ui_rain_fix",
        "type": "ui_gauge",
        "z": "tab_pbclima_02",
        "name": "Chuva (mm/h)",
        "group": "grp_cfg_5fd9",
        "order": 3,
        "width": "4",
        "height": "4",
        "gtype": "gage",
        "title": "Chuva (mm/h)",
        "label": "mm/h",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#66bb6a",
            "#fdd835",
            "#ef5350"
        ],
        "seg1": "2",
        "seg2": "10",
        "x": 1475,
        "y": 210,
        "wires": []
    },
    {
        "id": "ui_wind_fix",
        "type": "ui_gauge",
        "z": "tab_pbclima_02",
        "name": "Vento (km/h)",
        "group": "grp_cfg_5fd9",
        "order": 4,
        "width": "4",
        "height": "4",
        "gtype": "gage",
        "title": "Vento (km/h)",
        "label": "km/h",
        "format": "{{value}}",
        "min": 0,
        "max": "60",
        "colors": [
            "#66bb6a",
            "#fdd835",
            "#ef5350"
        ],
        "seg1": "15",
        "seg2": "40",
        "x": 1460,
        "y": 260,
        "wires": []
    },
    {
        "id": "ui_chart_fix",
        "type": "ui_chart",
        "z": "tab_pbclima_02",
        "name": "Histórico (Temp/Chuva)",
        "group": "grp_cfg_5fd9",
        "order": 5,
        "width": "12",
        "height": "5",
        "label": "Histórico (Temp, Chuva)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "Sem dados",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#ff7f0e",
            "#2ca02c",
            "#d62728"
        ],
        "outputs": 1,
        "x": 1510,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "hc_api_status_sw",
        "type": "switch",
        "z": "tab_pbclima_02",
        "name": "Checa Status API",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 260,
        "wires": [
            [
                "hc_api_ok_chg"
            ],
            [
                "hc_api_err_chg"
            ]
        ]
    },
    {
        "id": "hc_api_ok_chg",
        "type": "change",
        "z": "tab_pbclima_02",
        "name": "API OK",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "API OK ",
                "tot": "str"
            }
        ],
        "x": 1060,
        "y": 240,
        "wires": [
            [
                "hc_api_ui"
            ]
        ]
    },
    {
        "id": "hc_api_err_chg",
        "type": "change",
        "z": "tab_pbclima_02",
        "name": "API ERRO",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "API Erro ",
                "tot": "str"
            }
        ],
        "x": 1060,
        "y": 280,
        "wires": [
            [
                "hc_api_ui"
            ]
        ]
    },
    {
        "id": "hc_api_ui",
        "type": "ui_text",
        "z": "tab_pbclima_02",
        "group": "grp_hc_9b21",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "Status API",
        "label": "Status da API",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1260,
        "y": 260,
        "wires": []
    },
    {
        "id": "hc_lastupd_fn",
        "type": "function",
        "z": "tab_pbclima_02",
        "name": "Última atualização",
        "func": "const d = new Date();\nmsg.payload = d.toLocaleString();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 320,
        "wires": [
            [
                "hc_lastupd_ui"
            ]
        ]
    },
    {
        "id": "hc_lastupd_ui",
        "type": "ui_text",
        "z": "tab_pbclima_02",
        "group": "grp_hc_9b21",
        "order": 2,
        "width": "6",
        "height": "1",
        "name": "Última atualização",
        "label": "Última atualização",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1260,
        "y": 320,
        "wires": []
    },
    {
        "id": "hc_mqtt_status",
        "type": "status",
        "z": "tab_pbclima_02",
        "name": "Status do nó MQTT",
        "scope": [
            "mqtt_out_fix"
        ],
        "x": 850,
        "y": 380,
        "wires": [
            [
                "hc_mqtt_parse"
            ]
        ]
    },
    {
        "id": "hc_mqtt_parse",
        "type": "function",
        "z": "tab_pbclima_02",
        "name": "Parse status MQTT",
        "func": "const s = (msg.status && msg.status.text) || '';\nif (/connected/i.test(s)) {\n  msg.payload = 'MQTT Conectado ';\n} else {\n  msg.payload = 'MQTT Desconectado ';\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 380,
        "wires": [
            [
                "hc_mqtt_ui"
            ]
        ]
    },
    {
        "id": "hc_mqtt_ui",
        "type": "ui_text",
        "z": "tab_pbclima_02",
        "group": "grp_hc_9b21",
        "order": 3,
        "width": "6",
        "height": "1",
        "name": "Status MQTT",
        "label": "MQTT",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1260,
        "y": 380,
        "wires": []
    },
    {
        "id": "2d9cfda173f87b06",
        "type": "global-config",
        "env": [],
        "modules": {
            "node-red-dashboard": "3.6.6"
        }
    }
]